package shane.leetcode.problems.medium;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

/**
 * Runtime
 * 1ms
 * Beats100.00%
 */
public class Q2311LongestBinarySubsequenceLessThanOrEqualToK2 {

    @Test
    public void test() {
        assertThat(longestSubsequence("00101001", 1)).isEqualTo(6);
        assertThat(longestSubsequence("001010101011010100010101101010010", 93_951_055)).isEqualTo(31);
        assertThat(longestSubsequence("1001010", 5)).isEqualTo(5);
        assertThat(longestSubsequence("0000", 1)).isEqualTo(4);
    }

    @Test
    public void test2() {
        assertThat(longestSubsequence
                .isEqualTo(500);
    }

    public int longestSubsequence(String s, int k) {
        int length = 0;
        int by = 1;
        for (int i = s.length() - 1; i >= 0; i--) {
            int n = s.charAt(i) - '0';
            if (n * by <= k) {
                k -= (n * by);
                if (by <= k) {
                    by <<= 1;
                }
                length++;
            }
        }
        return length;
    }

}
